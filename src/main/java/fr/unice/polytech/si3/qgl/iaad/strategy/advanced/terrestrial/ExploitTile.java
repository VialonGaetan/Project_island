package fr.unice.polytech.si3.qgl.iaad.strategy.advanced.terrestrial;

import fr.unice.polytech.si3.qgl.iaad.engine.format.Context;
import fr.unice.polytech.si3.qgl.iaad.engine.player.actions.Decision;
import fr.unice.polytech.si3.qgl.iaad.engine.player.actions.Exploit;
import fr.unice.polytech.si3.qgl.iaad.engine.player.results.ExploitResult;
import fr.unice.polytech.si3.qgl.iaad.engine.player.results.Result;
import fr.unice.polytech.si3.qgl.iaad.strategy.Protocol;
import fr.unice.polytech.si3.qgl.iaad.util.contract.ManufacturedContract;
import fr.unice.polytech.si3.qgl.iaad.util.map.IslandMap;
import fr.unice.polytech.si3.qgl.iaad.util.resource.PrimaryResource;
import fr.unice.polytech.si3.qgl.iaad.util.workforce.Crew;

import java.util.Optional;

/**
 * @author Alexandre Clement
 * @since 19/03/2017.
 */
public class ExploitTile implements Protocol
{
    private final Context context;
    private final IslandMap map;
    private final Crew crew;
    private final PrimaryResource resource;

    ExploitTile(Context context, IslandMap map, Crew crew, PrimaryResource resource)
    {
        this.context = context;
        this.map = map;
        this.crew = crew;
        this.resource = resource;
    }

    @Override
    public Decision takeDecision()
    {
        return new Exploit(resource);
    }

    @Override
    public Protocol acknowledgeResults(Result result)
    {
        ExploitResult exploitResult = new ExploitResult(result);
        crew.collect(resource, exploitResult.getExploitAmount());
        completePrimaryContract();
        return findARealisableManufacturedContract()
                .<Protocol>map(manufacturedContract -> new TransformResource(context, map, crew, manufacturedContract))
                .orElse(new ScheduleCrewPath(context, map, crew));
    }

    private void completePrimaryContract()
    {
        context.getContract().getPrimaryContracts()
                .stream()
                .filter(crew::canComplete)
                .forEach(crew::complete);
    }

    private Optional<ManufacturedContract> findARealisableManufacturedContract()
    {
        double cost;
        for (ManufacturedContract manufacturedContract : context.getContract().getManufacturedContracts())
        {
            if (crew.haveEnoughResourceToTransform(manufacturedContract) && manufacturedContract.notComplete())
            {
                cost = manufacturedContract.getRemainingQuantity() * manufacturedContract.getResource().getFactor() * 1.1;
                if (context.getBudget().isGreaterThan(cost))
                    return Optional.of(manufacturedContract);
            }
        }
        return Optional.empty();
    }
}
