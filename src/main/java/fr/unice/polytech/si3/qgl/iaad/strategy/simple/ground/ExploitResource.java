package fr.unice.polytech.si3.qgl.iaad.strategy.simple.ground;

import fr.unice.polytech.si3.qgl.iaad.engine.player.actions.Decision;
import fr.unice.polytech.si3.qgl.iaad.engine.player.actions.Exploit;
import fr.unice.polytech.si3.qgl.iaad.engine.player.results.ExploitResult;
import fr.unice.polytech.si3.qgl.iaad.engine.player.results.Result;
import fr.unice.polytech.si3.qgl.iaad.strategy.Protocol;
import fr.unice.polytech.si3.qgl.iaad.strategy.common.StopExploration;
import fr.unice.polytech.si3.qgl.iaad.util.map.Compass;
import fr.unice.polytech.si3.qgl.iaad.util.map.IslandMap;
import fr.unice.polytech.si3.qgl.iaad.util.resource.Resource;
import fr.unice.polytech.si3.qgl.iaad.util.resource.ResourceInformation;
import fr.unice.polytech.si3.qgl.iaad.util.workforce.Crew;

import java.util.List;
import java.util.Map;

/**
 * @author Gaetan Vialon
 *         Created the 03/03/2017.
 */
public class ExploitResource implements Protocol {

    private Exploit action;
    private ExploitResult exploitResult;
    private Map<Resource,Integer> contrat;
    private Crew crew;
    private IslandMap map;
    private Resource resource;
    private Compass direction;
    private Compass sense;

    ExploitResource(Resource resource, Compass direction,Compass sense,Map contrat, Crew crew, IslandMap map) {
        this.resource = resource;
        this.contrat = contrat;
        this.crew = crew;
        this.map = map;
        this.direction=direction;
        this.sense=sense;
        action = new Exploit(resource);
    }

    @Override
    public Decision takeDecision() {
        map.getTile(crew.getLocation()).exploitResource(resource);
        return action;
    }

    @Override
    public Protocol acknowledgeResults(Result result) {
        exploitResult = new ExploitResult(result);
        contrat.put(resource,contrat.get(resource)-exploitResult.getExploitAmount());
        if (contrat.get(resource)<=0) {
            contrat.remove(resource);
            if (contrat.isEmpty()) return new StopExploration();
            return new MoveOnMap(direction,sense,contrat,crew,map);
        }
        if (exploitResult.getExploitAmount() <= 2){
            if (otherResource() != null)
                return new ExploitResource(otherResource(),direction,sense,contrat,crew,map);
            else
                return new MoveOnMap(direction,sense,contrat,crew,map);
        }
        return new ExploitResource(resource,direction,sense,contrat,crew,map);
    }


    private Resource otherResource(){
        List <ResourceInformation> info = map.getTile(crew.getLocation()).getResourceInformationList();
        for (ResourceInformation resInfo : info) {
            if (contrat.containsKey(resInfo.getResource()) && !map.getTile(crew.getLocation()).resourceAlreadyExploited(resInfo.getResource()))
                return resInfo.getResource();
        }
        return null;

    }
}
