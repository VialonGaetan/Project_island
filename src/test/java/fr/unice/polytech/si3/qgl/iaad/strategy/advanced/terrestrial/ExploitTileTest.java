package fr.unice.polytech.si3.qgl.iaad.strategy.advanced.terrestrial;

import fr.unice.polytech.si3.qgl.iaad.engine.format.Context;
import fr.unice.polytech.si3.qgl.iaad.engine.format.json.JsonResult;
import fr.unice.polytech.si3.qgl.iaad.engine.player.actions.ArgActions;
import fr.unice.polytech.si3.qgl.iaad.strategy.Protocol;
import fr.unice.polytech.si3.qgl.iaad.util.contract.Contract;
import fr.unice.polytech.si3.qgl.iaad.util.contract.ManufacturedContract;
import fr.unice.polytech.si3.qgl.iaad.util.contract.PrimaryContract;
import fr.unice.polytech.si3.qgl.iaad.util.map.Compass;
import fr.unice.polytech.si3.qgl.iaad.util.map.IslandMap;
import fr.unice.polytech.si3.qgl.iaad.util.resource.Manufactured;
import fr.unice.polytech.si3.qgl.iaad.util.resource.PrimaryResource;
import fr.unice.polytech.si3.qgl.iaad.util.workforce.Crew;
import org.json.JSONObject;
import org.junit.Before;
import org.junit.Test;

import java.awt.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * @author Gaetan Vialon
 *         Created the 25/03/2017.
 */
public class ExploitTileTest {

    private Context context;
    private Crew crew;
    private IslandMap map;
    private PrimaryResource primaryResource;

    @Before
    public void setUp() throws Exception {
        crew = new Crew(1,new Point(1,1));
        map = new IslandMap();
        primaryResource = PrimaryResource.FRUITS;
        context = mock(Context.class);
        when(context.getBudget()).thenReturn(10000);
        when(context.getHeading()).thenReturn(Compass.E);
        when(context.getNumberOfMen()).thenReturn(12);
        Contract contract = new Contract();
        contract.addContract(new PrimaryContract(PrimaryResource.FRUITS,10));
        contract.addContract(new ManufacturedContract(Manufactured.PLANK,5));
        when(context.getContract()).thenReturn(contract);
    }

    @Test
    public void exploitTest() throws Exception {
        //First exploit
        Protocol protocol = new ExploitTile(context, map, crew, primaryResource);
        assertNotEquals(protocol.takeDecision(),null);
        assertEquals(protocol.takeDecision().getActionEnum(), ArgActions.EXPLOIT);
        JsonResult result = new JsonResult(new JSONObject("{ \"cost\": 3, \"extras\": {\"amount\": 9}, \"status\": \"OK\" }"));
        protocol.acknowledgeResults(result);
        assertFalse(crew.canComplete(context.getContract().get(PrimaryResource.FRUITS)));
        assertFalse(crew.haveEnoughResourceToTransform(context.getContract().get(Manufactured.PLANK)));

        //Second exploit
        protocol = new ExploitTile(context,map,crew,primaryResource);
        protocol.takeDecision();
        assertNotEquals(protocol.takeDecision(),null);
        assertEquals(protocol.takeDecision().getActionEnum(), ArgActions.EXPLOIT);
        result = new JsonResult(new JSONObject("{ \"cost\": 3, \"extras\": {\"amount\": 2}, \"status\": \"OK\" }"));
        protocol.acknowledgeResults(result);
        assertTrue(crew.canComplete(context.getContract().get(PrimaryResource.FRUITS)));
        assertFalse(crew.haveEnoughResourceToTransform(context.getContract().get(Manufactured.PLANK)));


        //Third exploit
        primaryResource = PrimaryResource.WOOD;
        protocol = new ExploitTile(context,map,crew,primaryResource);
        protocol.takeDecision();
        assertNotEquals(protocol.takeDecision(),null);
        assertEquals(protocol.takeDecision().getActionEnum(), ArgActions.EXPLOIT);
        result = new JsonResult(new JSONObject("{ \"cost\": 3, \"extras\": {\"amount\": 0}, \"status\": \"OK\" }"));
        protocol.acknowledgeResults(result);
        assertTrue(crew.canComplete(context.getContract().get(PrimaryResource.FRUITS)));
        assertFalse(crew.haveEnoughResourceToTransform(context.getContract().get(Manufactured.PLANK)));

        //Fourth exploit
        primaryResource = PrimaryResource.WOOD;
        protocol = new ExploitTile(context,map,crew,primaryResource);
        protocol.takeDecision();
        assertNotEquals(protocol.takeDecision(),null);
        assertEquals(protocol.takeDecision().getActionEnum(), ArgActions.EXPLOIT);
        result = new JsonResult(new JSONObject("{ \"cost\": 3, \"extras\": {\"amount\": 1}, \"status\": \"OK\" }"));
        protocol.acknowledgeResults(result);
        assertTrue(crew.canComplete(context.getContract().get(PrimaryResource.FRUITS)));
        assertFalse(crew.haveEnoughResourceToTransform(context.getContract().get(Manufactured.PLANK)));
        //He doesn't have enough to get all plank

        //Fifth exploit
        primaryResource = PrimaryResource.WOOD;
        protocol = new ExploitTile(context,map,crew,primaryResource);
        protocol.takeDecision();
        assertNotEquals(protocol.takeDecision(),null);
        assertEquals(protocol.takeDecision().getActionEnum(), ArgActions.EXPLOIT);
        result = new JsonResult(new JSONObject("{ \"cost\": 3, \"extras\": {\"amount\": 1}, \"status\": \"OK\" }"));
        protocol.acknowledgeResults(result);
        assertTrue(crew.canComplete(context.getContract().get(PrimaryResource.FRUITS)));
        assertTrue(crew.haveEnoughResourceToTransform(context.getContract().get(Manufactured.PLANK)));
    }
}